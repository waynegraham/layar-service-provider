= Layar Service Provider

This is the forked Layar Service provider implementation. The big difference is that this implementation relies heavily on PostGIS and associated functionality to enable searches from within the PostGIS geometry data types instead of relying on only latitude & longitude points.

== PostGIS template

Assuming you've properly installed PostGIS, you can create a spatially enabled template for Rails to use in the database.yml file.

  sudo su - postgres
  createdb -E UTF8 template_postgis # create the postgis template
  createlang -d template_postgis plpgsql # Add PLPGSQL language support
  psql -d template_postgis -f /opt/local/share/postgis/lwpostgis.sql
  psql -d template_postgis -f /opt/local/share/postgis/spatial_ref_sys.sql
  cat <<EOS | psql -d template_postgis
  UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis';
  REVOKE ALL ON SCHEMA public FROM public;
  GRANT USAGE ON SCHEMA public TO public;
  GRANT ALL ON SCHEMA public TO postgres;
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE public.geometry_columns TO PUBLIC;
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLE public.spatial_ref_sys TO PUBLIC;
  VACUUM FULL FREEZE;
  EOS
  exit

Now you can just use the template when creating your tables with the inclusion of the template line

  development:
    adapter: postgresql
    encoding: unicode
    database: layar_development
    <b>template: template_postgis<\b>
    pool: 5
    username: postgres
    password:

== 3D Support